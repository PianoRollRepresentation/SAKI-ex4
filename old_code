#%%

def impossible_store_transition(key: str, from_comb: list, to_comb: list, field: tuple):
    """
    Indicates if this store transition is impossible.

    Example:
        from-state: ['red']  ->  ['empty' 'blue']
                                 ['white' 'empty']

        to-state: ['empty' 'blue']
                  ['white' 'empty'] -> ['blue']

        is impossible, because 'red' needs to be stored somewhere.

    :param key: key of the item to be stored in the warehouse (in example: 'red').
    :param from_comb: from-state without the key as list (item to be stored, in example: [['empty', 'blue']
                                                                                          ['white', 'empty']]).
    :param to_comb: to-state without the key as list (item to be stored/restored, in example: [['empty', 'blue']
                                                                                               ['white', 'empty']]).
    :param field: coordinates the robot stands at.
    :return: True if the transition is impossible, False otherwise.
    """
    for y in range(len(from_comb)):
        for x in range(len(from_comb[y])):
            if from_comb[y][x] == 'empty' and neighboured_fields((y, x), field):
                from_comb[y][x] = key

                if from_comb == to_comb:
                    return False

                from_comb[y][x] = 'empty'
    return True

#%%

def impossible_restore_transition(key: str, from_comb: list, to_comb: list, field: tuple):
    """
    Indicates if this restore transition is impossible.

    Example:
        from-state: ['empty' 'blue']
                    ['white' 'empty'] -> ['blue']

        to-state: ['empty' 'blue']
                  ['white' 'empty'] -> ['white']

        is impossible, because some 'blue' needs to be restored.

    :param key: key of the item to be restored in the warehouse (in example: 'blue').
    :param from_comb: from-state without the key as list (item to be restored, in example: [['empty', 'blue']
                                                                                            ['white', 'empty']]).
    :param to_comb: to-state without the key as list (item to be stored/restored, in example: [['empty', 'blue']
                                                                                               ['white', 'empty']]).
    :param field: coordinates the robot stands at.
    :return: True if the transition is impossible, False otherwise.
    """
    for y in range(len(from_comb)):
        for x in range(len(from_comb[y])):
            if from_comb[y][x] == key and neighboured_fields((y, x), field):
                from_comb[y][x] = 'empty'

                if from_comb == to_comb:
                    return False

                from_comb[y][x] = key
    return True